version: "3.8"

services:
  nginx:
    build: "./containers/nginx"
    ports:
      - "80:80"
      - "443:443"
    container_name: "nginx"
    volumes: 
      - ./certs:/etc/nginx/certs
    networks:
      - app
    links:
      - node1:node1
      - node2:node2
      - node3:node3
    depends_on:
      - node1
      - node2
      - node3
      - postgres

  node1:
    build: "./containers/node"
    ports:
      - "3000"
    networks:
      - app
      - db
      - amqp
    container_name: "node1"
    environment:
      - INSTANCE=node1
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - VOICE_RSS_KEY=${VOICE_RSS_KEY}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
    depends_on:
      postgres:
        condition: service_healthy
  
  node2:
    build: "./containers/node"
    container_name: "node2"
    ports:
      - "3000"
    networks:
      - app
      - db
      - amqp
    environment:
      - INSTANCE=node2
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - VOICE_RSS_KEY=${VOICE_RSS_KEY}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
    depends_on:
      postgres:
        condition: service_healthy

  node3:
    build: "./containers/node"
    ports:
      - "3000"
    container_name: "node3"
    networks:
      - app
      - db
      - amqp
    environment:
      - INSTANCE=node3
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - VOICE_RSS_KEY=${VOICE_RSS_KEY} 
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    build: "./containers/postgres"
    restart: always
    container_name: "postgres"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
    ports:
      - '5432:5432'
    networks:
      - db
    volumes: 
      - ./containers/postgres/data:/var/lib/postgresql/data
      - ./containers/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
        test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DATABASE} -U $${POSTGRES_USER}"]
        interval: 5s
        timeout: 5s
        retries: 5

  nodemailer:
    build: "./containers/nodemailer"
    container_name: "nodemailer"
    networks:
      - amqp
    depends_on:
      rabbitmq:
        condition: service_healthy
  
  rabbitmq:
    build: "./containers/rabbitmq"
    container_name: "rabbitmq"
    ports:
      - "5672:5672"
    networks:
      - amqp
    logging:
      driver: none
    healthcheck:
        test: rabbitmq-diagnostics -q ping
        interval: 5s
        timeout: 5s
        retries: 5

networks:
  app:
    driver: bridge
  db:
    driver: bridge
  amqp:
    driver: bridge